from rest_framework import serializers
from django.shortcuts import get_object_or_404
from .models import Task, Project
from users.models import TaskboardUser

class TaskOverviewSerializer(serializers.ModelSerializer):
    """Returns the UUID and Summary of a task.
    
    Intended to be used when returning a list of tasks, rather than
    returning all the data.
    """
    class Meta:
        model = Task
        fields = (
            "uuid",
            "summary",
        )

class TaskDetailsSerializer(serializers.ModelSerializer):
    """Returns the full information regarding a task.
    
    Author and Project foreign keys are replaced with their string
    representations. Type and Status enums are replaced with their
    display strings.
    """
    
    class Meta:
        model = Task
        fields = "__all__"

    def to_representation(self, instance):
        data = super().to_representation(instance)

        # replace foreign keys with string representation

        author_pk = data.pop("author")
        project_pk = data.pop("project")

        data.update({
            "author": TaskboardUser.objects.get(pk=author_pk).username}
        )
        data.update({"project": Project.objects.get(pk=project_pk).name})

        # replace enums with display values
        # NOTE: get_[field]_display methods autogenerated when using an
        # enum field. or maybe it's choices idk

        data.update({"type": instance.get_type_display()})
        data.update({"status": instance.get_status_display()})

        return data

    